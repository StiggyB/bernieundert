// IDL fuer das GGT-Projekt.
// Version SS 2012


module monitor {

  typedef sequence<string> ProzessIds;
  typedef sequence<long> Startzahlen;



  interface Monitor {
    /*
     * Bekanntgabe der Ringzusammensetzung. 
     * Ring wird als String-Array uebergeben.
     * In dem Array sind die IDs der beteiligten Prozesse anzugeben.
     * Die Ids sollen sich zusammensetzen aus dem Namen des Starters 
     * und einer vom Starter vergebenen fortlaufenden Nummer.
     */
    void ring( in ProzessIds prozessIds );
    
    /*
     * Bekanntgabe der Startzahlen der beteiligten Prozesse.
     * Zahlen werden in einem Integer-Array uebergeben.
     * Laenge des Startzahlen-Arrays muss mit der Laenge des Prozessids-Arrays uebereinstimmen.
     */
    void startzahlen( in Startzahlen startzahlen );
    
    /*
     * Mitteilung an den Monitor, dass von einem Prozess eine neue Zahl empfangen wurde.
     * Mitteilung soll auch gesendet werden, wenn die Zahl vom Prozess nicht bearbeitet wurde, 
     * weil sie zu gross war.
     * Parameter enthalten die Angaben, welcher Prozess die Zahl empfangen hat, von welchem
     * Prozess sie gesendet wurde und welche Zahl uebertragen wurde.
     */
    void rechnen( in string prozessId, in string prozessIdAbsender, in long num );
    

    /*
     * Mitteilung an den Monitor, dass von einem Prozess eine Terminierungsanfrage empfangen wurde.
     * Parameter enthalten die Angaben, welcher Prozess die Anfrage empfangen hat, von wem sie
     * urspruenglich gesendet wurde und ob terminiert werden soll.
     */
    void terminieren( in string prozessId, in string prozessIdAbsender, in boolean terminiere );
    
    /*
     * Mit diesem Aufruf soll ein terminierender Prozess das Ergebnis seiner Berechnung an den
     * Monitor uebergeben.
     */
    void ergebnis( in string prozessId, in long num );
  };


};

module ggtCorba {

	interface Starter {
		string getName();
		void createProcesses(in long count);
		void killProcesses();
		void shutdown();
	};

	typedef sequence<Starter> starterList;

	interface ggtProcess{
		void initProcess(in ggtProcess left, in ggtProcess right, in long startValue, in long delay, in long timeout, in monitor::Monitor mntr);
		void start();
		void calc(in long y, in string msgFrom);
		void terminate(in string processName, in boolean isAllowed);
		string getName();
		void kill();
		long getStartValue();
	};
	
	interface Coordinator {
	    exception starterAlreadyExists{ string s;};
    	exception starterDoesNotExists{ string s;};
    	exception noStarters{ string s;};
    	exception calculationInProgress{ string s;};
		starterList getStarters();
		void start(in long minProcess, in long maxProcess, in long minDelay, in long maxDelay, in long timeout, in long ggt, in monitor::Monitor mntr) raises (noStarters, calculationInProgress);
		boolean shutdown();
		boolean isCalculating();
		void registerStarter(in Starter starter) raises (starterAlreadyExists);
		void registerProcess(in ggtProcess process, in string processName);
		void unregisterStarter(in Starter starter) raises (starterDoesNotExists);
		void processCalcDone(in ggtProcess process);
		
	};
	
};